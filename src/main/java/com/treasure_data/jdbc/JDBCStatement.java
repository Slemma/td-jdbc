package com.treasure_data.jdbc;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;

import org.hsqldb.result.ResultConstants;

import com.treasure_data.client.TreasureDataClient;
import com.treasure_data.jdbc.internal.CommandExecutor;
import com.treasure_data.jdbc.internal.TreasureDataClientAdaptor;
import com.treasure_data.model.Database;
import com.treasure_data.model.Job;

public class JDBCStatement extends JDBCAbstractStatement implements Statement {

    private TreasureDataClient client;

    private Database database;

    private CommandExecutor exec;

    private int fetchSize = 50;

    /**
     * We need to keep a reference to the result set to support the following:
     * <code>
     * statement.execute(String sql);
     * statement.getResultSet();
     * </code>.
     */
    private ResultSet currentResultSet = null;

    /**
     * The maximum number of rows this statement should return (0 => all rows).
     */
    private int maxRows = 0;

    /**
     * Add SQLWarnings to the warningChain if needed.
     */
    private SQLWarning warningChain = null;

    /**
     * Keep state so we can fail certain calls made after close().
     */
    private boolean isClosed = false;

    public JDBCStatement(TreasureDataClient client, Database database) {
        this.client = client;
        this.database = database;
        TreasureDataClientAdaptor clientAdaptor =
            new TreasureDataClientAdaptor(this.client, this.database);
        this.exec = new CommandExecutor(clientAdaptor);
    }

    public void addBatch(String sql) throws SQLException {
        throw new SQLException("Method not supported");
    }

    public void cancel() throws SQLException {
        throw new SQLException("Method not supported");
    }

    public void clearBatch() throws SQLException {
        throw new SQLException("Method not supported");
    }

    public void clearWarnings() throws SQLException {
        warningChain = null;
    }

    public void close() throws SQLException {
        client = null;
        currentResultSet = null;
        isClosed = true;
    }

    public boolean execute(String sql) throws SQLException {
        ResultSet rs = executeQuery(sql);

        // TODO: this should really check if there are results, but there's no easy
        // way to do that without calling rs.next();
        return rs != null;
    }

    public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
        throw new SQLException("Method not supported");
    }

    public boolean execute(String sql, int[] columnIndexes) throws SQLException {
        throw new SQLException("Method not supported");
    }

    public boolean execute(String sql, String[] columnNames) throws SQLException {
        throw new SQLException("Method not supported");
    }

    public int[] executeBatch() throws SQLException {
        throw new SQLException("Method not supported");
    }

    public synchronized ResultSet executeQuery(String sql) throws SQLException {
        fetchResult(sql);
        return getResultSet();
    }

    private void fetchResult(String sql) throws SQLException { // TODO
        try {
            currentResultSet = null;
            Job job = exec.execute(ResultConstants.EXECDIRECT, sql);
            if (job != null) {
                // get the result of the job
                currentResultSet = new JDBCQueryResultSet(client, maxRows, job);
                currentResultSet.setFetchSize(fetchSize);
            }
        } catch (Throwable t) {
            throw new SQLException(t);
        }
    }

    public int executeUpdate(String sql) throws SQLException {
        throw new SQLException("Method not supported");
    }

    public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
        throw new SQLException("Method not supported");
    }

    public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
        throw new SQLException("Method not supported");
    }

    public int executeUpdate(String sql, String[] columnNames) throws SQLException {
        throw new SQLException("Method not supported");
    }

    public Connection getConnection() throws SQLException {
        throw new SQLException("Method not supported");
    }

    public int getFetchDirection() throws SQLException {
        throw new SQLException("Method not supported");
    }

    public int getFetchSize() throws SQLException {
        return fetchSize;
    }

    public ResultSet getGeneratedKeys() throws SQLException {
        throw new SQLException("Method not supported");
    }

    public int getMaxFieldSize() throws SQLException {
        throw new SQLException("Method not supported");
    }

    public int getMaxRows() throws SQLException {
        return maxRows;
    }

    public boolean getMoreResults() throws SQLException {
        return getMoreResults(JDBCAbstractStatement.CLOSE_CURRENT_RESULT);
    }

    public boolean getMoreResults(int current) throws SQLException {
        return super.getMoreResults(current);
    }

    public int getQueryTimeout() throws SQLException {
        throw new SQLException("Method not supported");
    }

    public ResultSet getResultSet() throws SQLException {
        ResultSet result = currentResultSet;
        currentResultSet = null;
        return result;
    }

    public int getResultSetConcurrency() throws SQLException {
        throw new SQLException("Method not supported");
    }

    public int getResultSetHoldability() throws SQLException {
        throw new SQLException("Method not supported");
    }

    public int getResultSetType() throws SQLException {
        throw new SQLException("Method not supported");
    }

    public int getUpdateCount() throws SQLException {
        return 0;
    }

    public SQLWarning getWarnings() throws SQLException {
        return warningChain;
    }

    public boolean isClosed() throws SQLException {
        return isClosed;
    }

    public boolean isPoolable() throws SQLException {
        throw new SQLException("Method not supported");
    }

    public void setCursorName(String name) throws SQLException {
        throw new SQLException("Method not supported");
    }

    public void setEscapeProcessing(boolean enable) throws SQLException {
        throw new SQLException("Method not supported");
    }

    public void setFetchDirection(int direction) throws SQLException {
        throw new SQLException("Method not supported");
    }

    public void setFetchSize(int rows) throws SQLException {
        fetchSize = rows;
    }

    public void setMaxFieldSize(int max) throws SQLException {
        throw new SQLException("Method not supported");
    }

    public void setMaxRows(int max) throws SQLException {
        if (max < 0) {
            throw new SQLException("max must be >= 0");
        }
        maxRows = max;
    }

    public void setPoolable(boolean poolable) throws SQLException {
        throw new SQLException("Method not supported");
    }

    public void setQueryTimeout(int seconds) throws SQLException {
        throw new SQLException("Method not supported");
    }

    public boolean isWrapperFor(Class<?> iface) throws SQLException {
        throw new SQLException("Method not supported");
    }

    public <T> T unwrap(Class<T> iface) throws SQLException {
        throw new SQLException("Method not supported");
    }
}
